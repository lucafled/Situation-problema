from dataclasses import dataclass
from typing import Dict, List, Optional, Tuple
import re


# =========================
# Modelos de datos
# =========================
@dataclass
class SectionInfo:
    capacity: int
    remaining: int
    price: float


@dataclass
class Concert:
    id: int
    artist: str
    date: str
    time: str
    venue: str
    sections: Dict[str, SectionInfo]

@dataclass
class Sale:
    sale_id: int
    concert_id: int
    section: str
    quantity: int
    unit_price: float
    total_price: float


# =========================
# Utilidades de entrada
# =========================
def input_int(prompt: str, min_value: Optional[int] = None, max_value: Optional[int] = None) -> int:
    while True:
        raw = input(prompt).strip()
        if not re.fullmatch(r"-?\d+", raw or ""):
            print("Entrada inválida. Debe ser un número entero.")
            continue
        val = int(raw)
        if min_value is not None and val < min_value:
            print(f"El número debe ser ≥ {min_value}.")
            continue
        if max_value is not None and val > max_value:
            print(f"El número debe ser ≤ {max_value}.")
            continue
        return val


def input_choice(prompt: str, choices: List[str]) -> str:
    norm = {c.lower(): c for c in choices}
    while True:
        raw = input(prompt).strip().lower()
        if raw in norm:
            return norm[raw]
        print(f"Opción inválida. Elija entre: {', '.join(choices)}")


# =========================
# Conversión de rangos
# =========================
def parse_price_range(s: str) -> Tuple[int, int]:
    nums = re.findall(r"\d[\d,]*", s)
    if len(nums) < 2:
        raise ValueError(f"Rango de precio inválido: {s}")
    lo = int(nums[0].replace(",", ""))
    hi = int(nums[1].replace(",", ""))
    if lo > hi:
        lo, hi = hi, lo
    return lo, hi


def secciones(lo: int, hi: int) -> Dict[str, SectionInfo]:
    # Construye 4 secciones a partir del rango [lo, hi]
    general = lo
    platea = int(round(lo + 0.40 * (hi - lo), -1))
    preferente = int(round(lo + 0.70 * (hi - lo), -1))
    vip = hi
    return {
        "General": SectionInfo(capacity=500, remaining=500, price=float(general)),
        "Platea": SectionInfo(capacity=250, remaining=250, price=float(platea)),
        "Preferente": SectionInfo(capacity=200, remaining=200, price=float(preferente)),
        "VIP": SectionInfo(capacity=120, remaining=120, price=float(vip)),
    }


# =========================
# Carga de conciertos
# =========================
def preload_conciertos() -> List[Concert]:
    base_rows = [
        ("The Weeknd", "abril 20", "21:00", "GNP seguros", "2,000-14,000"),
        ("The Weeknd", "abril 21", "21:00", "GNP seguros", "2,000-14,000"),
        ("Guns N' Roses", "noviembre 8", "21:00", "GNP seguros", "2,100 - 9,000"),
        ("Bad Bunny", "diciembre 10", "21:00", "GNP seguros", "2,000-16,000"),
        ("Bad Bunny", "diciembre 11", "21:00", "GNP seguros", "2,000-16,000"),
        ("Bad Bunny", "diciembre 12", "21:00", "GNP seguros", "2,000-16,000"),
        ("Bad Bunny", "diciembre 15", "21:00", "GNP seguros", "2,000-16,000"),
        ("Bad Bunny", "diciembre 16", "21:00", "GNP seguros", "2,000-16,000"),
        ("Bad Bunny", "diciembre 19", "21:00", "GNP seguros", "2,000-16,000"),
        ("Bad Bunny", "diciembre 20", "21:00", "GNP seguros", "2,000-16,000"),
        ("Bad Bunny", "diciembre 10", "21:00", "GNP seguros", "2,000-16,000"),
        ("Chayanne", "octubre 9", "21:00", "Palacio de los deportes", "2,300-6,000"),
        ("Hozier", "octubre 14", "21:00", "Palacio de los deportes", "700-2,000"),
        ("Cuarteto de Nos", "octubre 18", "20:00", "Palacio de los deportes", "1,900-6,800"),
        ("Enrique Guzmán", "octubre 25", "21:30", "La Maraka", "1,500-3,300"),
        ("Yuri", "noviembre 6", "20:30", "Auditorio Nacional", "500-3,800"),
    ]
    concerts: List[Concert] = []
    for i, row in enumerate(base_rows, start=1):
        artist, date, time, venue, cost_range = row
        lo, hi = parse_price_range(cost_range)
        sections = secciones(lo, hi)
        concerts.append(Concert(
            id=i, artist=artist, date=date, time=time, venue=venue, sections=sections
        ))
    return concerts


# =========================
# Estado + helpers de consulta
# =========================
CONCERTS: List[Concert] = preload_conciertos()
SALES: List[Sale] = []      # usar tipo List[Sale]
NEXT_SALE_ID: int = 1       # folio autoincremental para ventas


def find_concert(concert_id: int) -> Optional[Concert]:
    for c in CONCERTS:
        if c.id == concert_id:
            return c
    return None


def _print_concert_detail(c: Concert) -> None:
    print(f"\nID: {c.id}")
    print(f"Artista: {c.artist}")
    print(f"Fecha/hora: {c.date} {c.time}")
    print(f"Lugar: {c.venue}")
    print("Secciones:")
    for name, s in c.sections.items():
        print(f"  - {name:<10} Precio ${s.price:,.2f} MXN | Disponibles {s.remaining}/{s.capacity}")


# =========================
# Opción 1: tickets
# =========================

def tickets():
    global SALES, NEXT_SALE_ID

    print("\n== Registrar compra de boletos ==")
    for c in CONCERTS:
        print(f"{c.id}. {c.artist} ({c.date} {c.time}) @ {c.venue}")
    cid = input_int("\nSeleccione el ID del concierto (1 - 16): ", 1, len(CONCERTS))
    concert = find_concert(cid)
    if not concert:
        print("Concierto no encontrado.")
        return

    print("\nSecciones disponibles:")
    for name, s in concert.sections.items():
        print(f"  {name:<10} Precio ${s.price:,.2f} | Disponibles: {s.remaining}")

    section = input_choice("Elija sección: ", list(concert.sections.keys()))
    s_info = concert.sections[section]
    if s_info.remaining == 0:
        print("No hay boletos disponibles en esa sección.")
        return

    qty = input_int(f"Cantidad de boletos (1-{s_info.remaining}): ", 1, s_info.remaining)
    total = qty * s_info.price
    confirm = input_choice(f"Total: ${total:,.2f}. ¿Confirmar compra? (si/no): ", ["si", "no"])
    if confirm.lower() == "no":
        print("Compra cancelada.")
        return

    s_info.remaining -= qty
    print(f"Compra realizada: {qty} boletos en {section}. Total: ${total:,.2f}")

    venta = Sale(
        sale_id=NEXT_SALE_ID,
        concert_id=concert.id,
        section=section,
        quantity=qty,
        unit_price=s_info.price,
        total_price=total,
    )
    SALES.append(venta)
    NEXT_SALE_ID += 1


# =========================
# Opción 2: datos_concierto
# =========================
def datos_concierto():
    if not CONCERTS:
        print("No hay conciertos cargados.")
        return

    modo = input_choice("¿Ver (uno) o (todos)?: ", ["uno", "todos"])
    if modo == "todos":
        for c in CONCERTS:
            _print_concert_detail(c)
        return

    cid = input_int("Ingrese el ID del concierto (1 - 16): ", min_value=1, max_value=len(CONCERTS))
    c = find_concert(cid)
    if not c:
        print("Concierto no encontrado.")
        return
    _print_concert_detail(c)


def lugares_disponibles():
    print("\n== Consultar lugares disponibles ==")
    if not CONCERTS:
        print("No hay conciertos cargados.")
        return

    print("Disponibilidad por concierto:")
    print("-----------------------------------------------------------------------------------------")
    print(f"{'ID':<3} | {'Artista':<20} | {'Fecha':<10} | {'Lugar':<20} | {'Disponibles Total':<18}")
    print("-----------------------------------------------------------------------------------------")

    for c in CONCERTS:
        # Suma los boletos restantes de todas las secciones de un concierto
        total_disponibles = sum(s.remaining for s in c.sections.values())
        print(f"{c.id:<3} | {c.artist:<20} | {c.date:<10} | {c.venue:<20} | {total_disponibles:<18,}")

    print("-----------------------------------------------------------------------------------------")
    print("\nPara ver el detalle por sección, use la opción 2 (Consultar datos del concierto).")
    print("Ingrese el ID del concierto deseado (1 - 16).")


def datos_ventas():
    global SALES

    if not SALES:
        print("\nAún no hay ventas registradas.")
        return

    total_recaudado = 0.0
    print("\n== Ventas registradas ==")
    for s in SALES:
        c = find_concert(s.concert_id)
        titulo = f"{c.artist} ({c.date} {c.time})" if c else f"Concierto {s.concert_id}"
        print(
            f"Folio {s.sale_id:04d} | {titulo} | Sección: {s.section:<10} "
            f"| Cant: {s.quantity:2d} | Unit: ${s.unit_price:,.2f} | Importe: ${s.total_price:,.2f}"
        )
        total_recaudado += s.total_price

    print(f"\nTotal recaudado: ${total_recaudado:,.2f}")


def consultar_ventas():
    print("\n== Consultar datos detallados de ventas y disponibilidad ==")
    if not CONCERTS:
        print("No hay conciertos cargados.")
        return

    # Muestra la lista de conciertos para que el usuario elija
    for c in CONCERTS:
        print(f"{c.id}. {c.artist} ({c.date})")

    # Pide el ID del concierto
    cid = input_int("\nSeleccione el ID del concierto (1 - 16) para ver el reporte: ", 1, len(CONCERTS))
    concert = find_concert(cid)

    if not concert:
        print("Concierto no encontrado.")
        return

    print(f"\n--- Reporte de Ventas para: {concert.artist} ({concert.date}) ---")

    total_vendidos = 0
    total_disponibles = 0
    total_capacidad = 0

    # Imprime la cabecera
    print(f"\n{'Sección':<12} | {'Capacidad':<10} | {'Vendidos':<8} | {'Disponibles':<11} | {'Precio':<12}")
    print("-" * 60)

    # Itera sobre las secciones
    for name, s in concert.sections.items():
        vendidos = s.capacity - s.remaining

        # Actualiza totales
        total_vendidos += vendidos
        total_disponibles += s.remaining
        total_capacidad += s.capacity

        # Imprime los datos por sección
        print(f"{name:<12} | {s.capacity:<10} | {vendidos:<8} | {s.remaining:<11} | ${s.price:,.2f}")

    print("-" * 60)
    print(f"{'TOTALES':<12} | {total_capacidad:<10} | {total_vendidos:<8} | {total_disponibles:<11} |")


# =========================
# Menú
# =========================
def mennuu():
    print("\n Taquilla de boletos de conciertos ")
    print("1. Registrar compra de boletos.")
    print("2. Consultar datos del concierto")
    print("3. Consultar lugares disponibles.")
    print("4. Consultar datos de las ventas.")
    print("5. Mostrar reportes de ventas por concierto.")
    print("6. Salir")


def menu():
    mennuu()
    while True:
        dicho = input("Elige una opción (ingresa 0 para volver al menu): ").strip()
        if dicho == "0":
            mennuu()
        if dicho == "1":
            tickets()
        if dicho == "2":
            datos_concierto()
        if dicho == "3":
            lugares_disponibles()
        if dicho == "4":
            datos_ventas()
        if dicho == "5":
            consultar_ventas()
        elif dicho == "6":
            print("¡Hasta luego! Vuelve pronto.")
            break


# Ejecutar
if __name__ == "__main__":
    menu()
